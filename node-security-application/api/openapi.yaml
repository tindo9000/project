openapi: 3.0.3
info:
  title: Security Application - OpenAPI 3.0
  version: 1.0.0
servers:
- url: http://localhost:8080
tags:
- name: Introduction
  description: |
    Students who own laptops at the University of Zimbabwe are expected to get declaration forms from the control room. These declaration forms generally contain the student’s basic information and the owned laptop’s basic details; students are supposed to always carry these declaration forms with them whenever they move around the university campus with their laptops because the security guards rely on the same declaration forms to assert that any student found leaving the campus with a laptop legitimately owns it.

    This way of reducing laptop theft incidences works great but it has 1 weakness; a determined perlaptoprator intending to steal laptops can easily generate fake declaration forms to use on leaving the campus with the stolen laptops since the declaration forms do not have any security features on them.

    To counter this security weakness, our Security App will replace declaration forms with an android application that will enable security guards to scan the laptop serial number and retrieve the legitimate owner’s details (from a central database) which are then used by the security guard on site to compare against the student ID of the student found carrying the laptop.

    This API will be responsible for controlling access to this central database containing registered students and their laptops and the remainder of this document outlines how the Android Applicationa and the web-based dashboard can interact with this API. It is loosely based on the [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) architectural style and all endpoints are secured with bearer authentication. For more, please see the authentication section below.
- name: Authentication
  description: |
    This API uses [Bearer Authentication](https://swagger.io/docs/specification/v3_0/authentication/bearer-authentication/).

    Bearer authentication (also called token authentication) is an [HTTP authentication scheme](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication) that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.” The bearer token is a cryptic string, generated by the server in response to a login request.

    To generate an access token, send the following request:

    ```bash
    curl --request POST \
      --url http://group-14-project.sixpence.co.zw/login \
      --header 'content-type: application/json' \
      --data '{"email":"<email>","password":"<password>"}'
    ```

    Sample response generated from this request:

    ```json
    {
      "access_token": "<ACCESS_TOKEN>",
      "token_type": "Bearer"
    }
    ```

    The access token should be sent with the `Authorization` header in subsequent API requests as shown in the example below:

    ```bash
    curl --request GET \
      --url "http://group-14-project.sixpence.co.zw/laptop" \
      --header "Content-Type: application/json" \
      --header "Authorization: Bearer <ACCESS_TOKEN>" \
      --data '{}'
    ```

    > **Note:** The access token should always be prefixed with the token type (`Bearer`) when being used as an authorization header. Requests without the `Bearer ` prefix will be refused.
- name: user
  description: Everything about users
- name: student
  description: Everything about students
- name: laptop
  description: Everything about Laptops
paths:
  /laptop:
    get:
      tags:
      - laptop
      summary: List all laptops
      description: Returns an array of all laptops
      operationId: getLaptops
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Laptop'
                x-content-type: application/json
        "400":
          description: Server failed to process request
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      security:
      - bearerAuth: []
      x-swagger-router-controller: Laptop
    post:
      tags:
      - laptop
      summary: Add a new laptop
      description: Adds a new laptop for an existing student into the database.
      operationId: addLaptop
      requestBody:
        description: |-
          The id and registeredAt in the request body are not required and any values submitted for them will be ignored.

          The studentId in the request body should have a value for an existing student in the database.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Laptop'
        required: true
      responses:
        "201":
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Laptop'
        "400":
          description: Server failed to process request
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      security:
      - bearerAuth: []
      x-swagger-router-controller: Laptop
  /laptop/findBySerialNumber:
    post:
      tags:
      - laptop
      summary: Find a student by laptop serial number
      description: Returns a single student that owns a laptop with serial number that matches the serial number
        number which will be extracted from the jpeg image in the request body from
        the database
      operationId: findStudentByLaptopSerialNumber
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScannedImageRequest'
        required: true
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        "400":
          description: Server failed to process request
        "404":
          description: No matching laptop found
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      security:
      - bearerAuth: []
      x-swagger-router-controller: Laptop
  /laptop/{laptopId}:
    get:
      tags:
      - laptop
      summary: Find a laptop by id
      description: Returns a single laptop with an id that matches the provided laptopId
        value
      operationId: findLaptopById
      parameters:
      - name: laptopId
        in: path
        description: Id of laptop to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Laptop'
        "400":
          description: Server failed to process request
        "404":
          description: Laptop not found
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      security:
      - bearerAuth: []
      x-swagger-router-controller: Laptop
    put:
      tags:
      - laptop
      summary: Update a laptop
      description: Updates a laptop with id that matches laptopId value using new
        values from the request body.
      operationId: updateLaptop
      parameters:
      - name: laptopId
        in: path
        description: Id of laptop that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: The id and registeredAt in the request body are not required
          and any values submitted for them will be ignored.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Laptop'
        required: true
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Laptop'
        "400":
          description: Server failed to process request
        "404":
          description: Laptop not found
      security:
      - bearerAuth: []
      x-swagger-router-controller: Laptop
    delete:
      tags:
      - laptop
      summary: Delete a laptop
      description: Deletes a laptop with id that matches the laptopId value
      operationId: deleteLaptop
      parameters:
      - name: laptopId
        in: path
        description: Id of laptop that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Operation Successful
        "400":
          description: Server failed to process request
        "404":
          description: Laptop not found
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      security:
      - bearerAuth: []
      x-swagger-router-controller: Laptop
  /student:
    get:
      tags:
      - student
      summary: List all students
      description: Returns an array of all students
      operationId: getStudents
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
                x-content-type: application/json
        "400":
          description: Server failed to process request
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      security:
      - bearerAuth: []
      x-swagger-router-controller: Student
    post:
      tags:
      - student
      summary: Add a new student
      description: Adds a new student into the database.
      operationId: addStudent
      requestBody:
        description: The id and registeredAt in the request body are not required
          and any values submitted for them will be ignored.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        "201":
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        "400":
          description: Server failed to process request
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      security:
      - bearerAuth: []
      x-swagger-router-controller: Student
  /student/findByRegistrationNumber:
    post:
      tags:
      - student
      summary: Find a student by registration number
      description: Returns a single student with registration number that matches
        the registration number which will be extracted from the jpeg image in the
        request body from the database
      operationId: findStudentByRegistrationNumber
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScannedImageRequest'
        required: true
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        "400":
          description: Server failed to process request
        "404":
          description: No matching student found
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      security:
      - bearerAuth: []
      x-swagger-router-controller: Student
  /student/{studentId}:
    get:
      tags:
      - student
      summary: Find a student by id
      description: Returns a single student with an id that matches the provided studentId
        value
      operationId: findStudentById
      parameters:
      - name: studentId
        in: path
        description: Id of student to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        "400":
          description: Server failed to process request
        "404":
          description: Student not found
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      security:
      - bearerAuth: []
      x-swagger-router-controller: Student
    put:
      tags:
      - student
      summary: Update a student
      description: Updates a student with id that matches studentId value using new
        values from the request body.
      operationId: updateStudent
      parameters:
      - name: studentId
        in: path
        description: Id of student that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: The id and registeredAt in the request body are not required
          and any values submitted for them will be ignored.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        "400":
          description: Server failed to process request
        "404":
          description: Student not found
      security:
      - bearerAuth: []
      x-swagger-router-controller: Student
    delete:
      tags:
      - student
      summary: Delete a student
      description: Deletes a student with id that matches the studentId value
      operationId: deleteStudent
      parameters:
      - name: studentId
        in: path
        description: Id of student that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Operation Successful
        "400":
          description: Server failed to process request
        "404":
          description: Student not found
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      security:
      - bearerAuth: []
      x-swagger-router-controller: Student
  /user:
    get:
      tags:
      - user
      summary: List all users
      description: Returns an array of all users
      operationId: getUsers
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
        "400":
          description: Server failed to process request
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      security:
      - bearerAuth: []
      x-swagger-router-controller: User
    post:
      tags:
      - user
      summary: Add a new user
      description: Adds a new user into the database.
      operationId: addUser
      requestBody:
        description: The id and registeredAt in the request body are not required
          and any values submitted for them will be ignored.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Server failed to process request
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      security:
      - bearerAuth: []
      x-swagger-router-controller: User
  /user/{userId}:
    get:
      tags:
      - user
      summary: Find a user by id
      description: Returns a single user with an id that matches the provided userId
        value
      operationId: findUserById
      parameters:
      - name: userId
        in: path
        description: Id of user to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Server failed to process request
        "404":
          description: User not found
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      security:
      - bearerAuth: []
      x-swagger-router-controller: User
    put:
      tags:
      - user
      summary: Update a user
      description: Updates a user with id that matches userId value using new values
        from the request body.
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: Id of user that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: The id and registeredAt in the request body are not required
          and any values submitted for them will be ignored.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Server failed to process request
        "404":
          description: User not found
      security:
      - bearerAuth: []
      x-swagger-router-controller: User
    delete:
      tags:
      - user
      summary: Delete a user
      description: Deletes a user with id that matches the userId value
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: Id of user that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Operation Successful
        "400":
          description: Server failed to process request
        "404":
          description: User not found
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      security:
      - bearerAuth: []
      x-swagger-router-controller: User
  /user/login:
    post:
      tags:
      - user
      summary: Login and retrieve plain text token
      description: "This endpoint is for logging in a user by their email and password,\
        \ the endpoint returns a token which should be sent on accessing any other\
        \ endpoint in this API"
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: Returns a json object which contains the plain text token
        "401":
          description: Authorization information is missing or invalid.
        "422":
          description: Server was unable to process the request because it contains
            invalid data
      x-swagger-router-controller: User
  /user/logout:
    get:
      tags:
      - user
      summary: Logout signed in user
      description: Logs out currently logged in user and destroys their session
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: Operation Successful
      x-swagger-router-controller: User
components:
  schemas:
    User:
      required:
      - email
      - firstName
      - lastName
      - password
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: theUser
        password:
          type: string
          example: "12345"
        registeredAt:
          type: string
          format: date-time
      example:
        firstName: John
        lastName: Doe
        password: "12345"
        registeredAt: 2000-01-23T04:56:07.000+00:00
        id: 10
        email: theUser
      xml:
        name: user
    Student:
      required:
      - emailAddress
      - firstName
      - lastName
      - phoneNumber
      - program
      - registrationNumber
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 11
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        phoneNumber:
          type: string
          example: "263777888999"
        emailAddress:
          type: string
          example: info@sixwares.co.zw
        registrationNumber:
          type: string
          example: R123456X
        program:
          type: string
          example: Sotware Engineering
        registeredAt:
          type: string
          format: date-time
      example:
        firstName: John
        lastName: Doe
        emailAddress: info@sixwares.co.zw
        phoneNumber: "263777888999"
        registrationNumber: R123456X
        registeredAt: 2000-01-23T04:56:07.000+00:00
        id: 11
        program: Sotware Engineering
      xml:
        name: student
    Laptop:
      required:
      - brand
      - color
      - model
      - serialNumber
      - studentId
      type: object
      properties:
        id:
          type: integer
          description: This id parameter is not required on all post and put requests
            i.e. values for it will be ignored for all post and get requests
          format: int64
          example: 9
        studentId:
          type: integer
          description: This studentId parameter should have a value for an existing
            student in the database
          format: int64
          example: 10
        serialNumber:
          type: string
          example: 8972PDF555AW
        brand:
          type: string
          example: HP
        model:
          type: string
          example: Probook G1
        color:
          type: string
          example: Silver
        registeredAt:
          type: string
          format: date-time
      example:
        studentId: 10
        serialNumber: 8972PDF555AW
        color: Silver
        registeredAt: 2000-01-23T04:56:07.000+00:00
        model: Probook G1
        id: 9
        brand: HP
      xml:
        name: laptop
    ScannedImageRequest:
      required:
      - scannedImage
      type: object
      properties:
        scannedImage:
          type: string
#          format: binary
    LoginRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          example: perseverance@sixpence.co.zw
        password:
          type: string
          example: make
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
